#include <Windows.h>
#include <Winternl.h>
#include <TlHelp32.h>
#include <Shlwapi.h>
#include <Psapi.h>
#include <string>
#include <iostream>

// includes the driver to be used in dkom
#include "Driver.h"

// defines the query handle information value
#define SystemHandleInformation (SYSTEM_INFORMATION_CLASS)0x10
// defines the length mismatch error
#define STATUS_INFO_LENGTH_MISMATCH 0xC0000004

// defines the actions to be used with load remote library
// manually maps the libraray to the process
#define ACTION_MANUAL_MAP 1
// calls load library within the process
#define ACTION_LOAD_LIBRARY 2
// hijacks a thread to execute the library
#define ACTION_REDIRECT_THREAD 3

// binary is a 64 bit portable executable
#define PE64 0x20B
// binary is a 32 bit portable executable
#define PE32 0x10B

// various tools used to interact with file objects
namespace File
{
	// returns the path of a 64 bit image on the system
	LPCSTR FindImagePath64(LPCSTR lpModuleName);

	// returns the path of a 32 bit image on the system
	LPCSTR FindImagePath32(LPCSTR lpModuleName);

	// returns the basename of a path
	LPCSTR GetBaseName(LPCSTR lpPath);

	// creates the given path
	VOID CreatePath(LPCSTR lpPath);

	// reads the specified file into a buffer
	PVOID ReadW(LPCWSTR lpFile, PDWORD dwOut);

	// reads the specified file into a buffer
	PVOID ReadA(LPCSTR lpFile, PDWORD dwOut);

	// write the specified buffer and length to the disk
	BOOL WriteA(LPCSTR lpFile, PVOID pBuffer, DWORD dwSize);

	// write the specified buffer and length to the disk
	BOOL WriteW(LPCWSTR lpFile, PVOID pBuffer, DWORD dwSize);
}

// various tools used to interact with process modules
namespace Module
{
	// remotely loads a library into the process associated with the given process handle (64 bit processes only)
	HMODULE LoadRemoteLibrary64(HANDLE hProcess, LPCSTR lpPath);

	// returns the nt headers of the specified module (64 bit processes only)
	PIMAGE_NT_HEADERS64 ReadNtHeaders64(HANDLE hProcess, HMODULE hModule);

	// returns the nt headers of the specified module (32 bit processes only)
	PIMAGE_NT_HEADERS32 ReadNtHeaders32(HANDLE hProcess, HMODULE hModule);

	// reads the specified directory of the given module (universal wrapper)
	PVOID ReadDirectory(HANDLE hProcess, HMODULE hModule, DWORD dwDirectory, PDWORD dwOut);

	// returns the base address of the module in the given process
	PVOID GetModuleBaseSnapshot32(DWORD dwProcessId, LPCSTR lpModuleName);

	// returns the base address of the module in the given process
	HMODULE GetRemoteModuleHandle(HANDLE hProcess, LPCSTR lpModuleName);

	// maps the specified image to the remote process (64 bit processes only)
	HMODULE RemoteMapImage64(HANDLE hProcess, LPCSTR lpImagePath);

	// maps the specified image to the remote process (32 bit processes only)
	HMODULE RemoteMapImage32(HANDLE hProcess, LPCSTR lpImagePath);

	// maps the specified image to the remote process (universal wrapper)
	HMODULE RemoteMapImage(HANDLE hProcess, LPCSTR lpImagePath);

	// rebases the specified remote image
	BOOL RemoteRebaseImage64(HANDLE hProcess, HMODULE hModule);

	// gets the address of a procedure within the given process module by remotely parsing the export table (64 bit processes only)
	PVOID GetRemoteProcAddress64(HANDLE hProcess, HMODULE hModule, LPCSTR lpProcName);

	// gets the address of a procedure within the given process module by remotely parsing the export table (32 bit processes only)
	PVOID GetRemoteProcAddress32(HANDLE hProcess, HMODULE hModule, LPCSTR lpProcName);

	// gets the address of a procedure within the given process module by remotely parsing the export table (universal wrapper)
	PVOID GetRemoteProcAddress(HANDLE hProcess, HMODULE hModule, LPCSTR lpProcName);

	// remotely loads a libaray via load library
	BOOL LoadLibraryRemote(HANDLE hProcess, LPCSTR lpPath);

	// remotely loads a libaray via manual map
	HMODULE LoadRemoteImage(HANDLE hProcess, LPCSTR lpPath);

	// remotely loads a library into the process associated with the given process handle (universal wrapper)
	HMODULE LoadRemoteLibrary(HANDLE hProcess, LPCSTR lpPath);
}

// various tools used to interact with process objects
namespace Process
{
	// returns the length of a remote string
	DWORD GetRemoteStringLength(HANDLE hProcess, PVOID pString);

	// wrapper for iswow64process
	BOOL IsProcess32(HANDLE hProcess, PBOOL Wow64Process);

	// returns the process id for the given image name
	DWORD FindProcess(LPCSTR lpImageName);

	// returns the eprocess address for the process id given
	// using the ntquerysysteminformation eprocess address leak
	PVOID GetObjectAddress(DWORD dwProcessId);

	// sets the handle's granted access value
	BOOL SetHandleAccess(HANDLE hProcess, DWORD DesiredAccess);

	// opens a handle to the given process via a driver
	HANDLE GetProcessHandle(DWORD dwProcessId, DWORD dwDesiredAccess);
}

// various tools used to interact with thread objects
namespace Thread
{
	// calls the specified image entry point (universal wrapper)
	BOOL CallEntry(HANDLE hProcess, PVOID pEntry, HINSTANCE hinstDLL, DWORD fdwReason);

	// opens a handle to the given thread via a driver
	HANDLE GetThreadHandle(DWORD dwThreadId, DWORD dwDesiredAccess);

	// returns an arbitrary thread id from the process
	DWORD GetProcessThread(DWORD dwProcessId);

	// redirects a the thread associated with the given thread handle (64 bit processes only)
	BOOL RedirectThread64(HANDLE hProcess, HANDLE hThread, PVOID pAddress, PVOID pArgument);

	// redirects a the thread associated with the given thread handle (32 bit processes only)
	BOOL RedirectThread32(HANDLE hProcess, HANDLE hThread, PVOID pAddress, PVOID pArgument);

	// redirects a the thread associated with the given thread handle (universal wrapper)
	BOOL RedirectThread(HANDLE hProcess, HANDLE hThread, PVOID pAddress, PVOID pArgument);
}